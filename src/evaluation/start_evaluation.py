#!/usr/bin/env python3
"""
Script de inicio para la evaluaci√≥n RAG con RAGAS
================================================

Este script facilita el inicio de la evaluaci√≥n completa:
1. Verifica que todos los servicios est√©n funcionando
2. Inicia la API RAG si es necesario
3. Ejecuta la evaluaci√≥n completa
"""

import os
import sys
import time
import subprocess
import signal
from pathlib import Path

def check_services():
    """Verifica que todos los servicios necesarios est√©n funcionando"""
    print("üîç Verificando servicios...")
    
    services = {
        "Qdrant": "http://localhost:6333",
        "Ollama": "http://localhost:11434",
        "API RAG": "http://localhost:8001"
    }
    
    import requests
    
    for service_name, url in services.items():
        try:
            if service_name == "Qdrant":
                response = requests.get(f"{url}/collections", timeout=5)
            elif service_name == "Ollama":
                response = requests.get(f"{url}/api/tags", timeout=5)
            else:  # API RAG
                response = requests.get(f"{url}/docs", timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ {service_name} est√° funcionando")
            else:
                print(f"‚ö†Ô∏è  {service_name} respondi√≥ con c√≥digo {response.status_code}")
                return False
                
        except requests.exceptions.RequestException:
            print(f"‚ùå {service_name} no est√° disponible en {url}")
            return False
    
    return True

def start_api_rag():
    """Inicia la API RAG en segundo plano"""
    print("üöÄ Iniciando API RAG...")
    
    try:
        # Cambiar al directorio de evaluaci√≥n
        eval_dir = Path(__file__).parent
        
        # Iniciar API en segundo plano
        process = subprocess.Popen(
            [sys.executable, "api_rag.py"],
            cwd=eval_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Esperar un poco para que inicie
        time.sleep(3)
        
        # Verificar que est√© funcionando
        import requests
        try:
            response = requests.get("http://localhost:8001/docs", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API RAG iniciada correctamente")
                return process
            else:
                print("‚ùå API RAG no respondi√≥ correctamente")
                process.terminate()
                return None
        except requests.exceptions.RequestException:
            print("‚ùå No se pudo conectar a la API RAG")
            process.terminate()
            return None
            
    except Exception as e:
        print(f"‚ùå Error iniciando API RAG: {e}")
        return None

def run_evaluation():
    """Ejecuta la evaluaci√≥n completa"""
    print("üéØ Ejecutando evaluaci√≥n RAG con RAGAS...")
    
    try:
        eval_dir = Path(__file__).parent
        result = subprocess.run(
            [sys.executable, "evaluate_ragas.py"],
            cwd=eval_dir,
            capture_output=False
        )
        
        if result.returncode == 0:
            print("‚úÖ Evaluaci√≥n completada exitosamente")
            return True
        else:
            print(f"‚ùå Evaluaci√≥n fall√≥ con c√≥digo {result.returncode}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando evaluaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIADOR DE EVALUACI√ìN RAG CON RAGAS")
    print("=" * 50)
    
    # Verificar variables de entorno
    if not os.getenv("MISTRAL_API_KEY"):
        print("‚ùå Error: MISTRAL_API_KEY no est√° configurada")
        print("Por favor, configura tu API key de Mistral en el archivo .env")
        return False
    
    # Verificar servicios
    if not check_services():
        print("\n‚ö†Ô∏è  Algunos servicios no est√°n disponibles")
        print("Aseg√∫rate de que Qdrant y Ollama est√©n funcionando")
        
        # Intentar iniciar API RAG
        api_process = start_api_rag()
        if not api_process:
            print("‚ùå No se pudo iniciar la API RAG")
            return False
        
        # Esperar un poco m√°s
        time.sleep(2)
        
        # Verificar nuevamente
        if not check_services():
            print("‚ùå Los servicios siguen sin estar disponibles")
            if api_process:
                api_process.terminate()
            return False
    
    # Ejecutar evaluaci√≥n
    print("\n" + "=" * 50)
    success = run_evaluation()
    
    if success:
        print("\nüéâ ¬°Evaluaci√≥n completada exitosamente!")
        print("üìÅ Revisa los archivos en evaluation_results/ para ver los resultados")
    else:
        print("\n‚ùå La evaluaci√≥n fall√≥")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
